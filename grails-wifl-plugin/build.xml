<project xmlns:ivy="antlib:org.apache.ivy.ant" name="wifl" default="test">
    <property environment="env"/>
    <property file="build.properties"/>

    <!-- Ivy properties for this module -->
    <property name="organization" value="org.wifl"/>
    <property name="module" value="grails-wifl"/>
    <property name="version" value="0.3"/>
    <property name="wifl.dir" value="${basedir}/web-app/wifl"/>
    <property name="wifl.repository.url" value="http://wifl.org/ivy"/>

    <condition property="grails.home" value="${env.GRAILS_HOME}">
      <isset property="env.GRAILS_HOME"/>
    </condition>
    <property name="ivy.build.dir" location="${basedir}/build"/>
    <property name="ivy.install.version" value="2.3.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.grails/ivy" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-${ivy.install.version}.jar" />
    <property name="ivy.publish.overwrite" value="false"/>

    <target name="download-ivy" unless="offline">
        <available file="${ivy.jar.file}" property="ivy.available"/>
        <antcall target="-download-ivy" />
    </target>

    <target name="-download-ivy" unless="ivy.available">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://archive.apache.org/dist/ant/ivy/${ivy.install.version}/apache-ivy-${ivy.install.version}-bin.zip"
            dest="${ivy.home}/ivy.zip" usetimestamp="true" verbose="true"/>
	      <unzip src="${ivy.home}/ivy.zip" dest="${ivy.jar.dir}">
	        <patternset>
            <include name="**/*.jar"/>
          </patternset>
          <mapper type="flatten"/>
        </unzip>
    </target>

    <target name="init-ivy" depends="download-ivy" unless="ivy.lib.path">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
           it into ant's lib dir (note that the latter copy will always take precedence).
           We will not fail as long as local lib dir exists (it may be empty) and
           ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>


    <property name="lib.dir" value="${basedir}/lib"/>

    <macrodef name="grails">
        <attribute name="script"/>
        <attribute name="args" default="" />
        <sequential>
            <grailsTask script="@{script}" args="@{args}" classpathref="grails.classpath">
                <compileClasspath refid="compile.classpath"/>
                <testClasspath refid="test.classpath"/>
                <runtimeClasspath refid="app.classpath"/>
            </grailsTask>
        </sequential>
    </macrodef>

    <!-- =================================
          target: resolve
         ================================= -->
    <target name="-resolve" description="Retrieve dependencies with ivy" depends="init-ivy">
        <ivy:retrieve pattern="${lib.dir}/[artifact].[ext]"/>
    </target>

    <target name="-init-grails" depends="-resolve">
        <mkdir dir="${lib.dir}/build"/>
        <path id="grails.classpath">
            <fileset dir="${grails.home}/dist" includes="grails-bootstrap-*.jar"/>
	    <fileset dir="${grails.home}/lib" includes="**/*.jar"/>
            <fileset dir="${lib.dir}/build"/>
        </path>

        <taskdef name="grailsTask"
                 classname="grails.ant.GrailsTask"
                 classpathref="grails.classpath"/>
    </target>

    <target name="build" description="Populate web-app/wifl directory" depends="-resolve">
        <unzip dest="${wifl.dir}">
          <fileset dir="${lib.dir}">
            <include name="**/*.zip"/>
          </fileset>
        </unzip>
    </target>
    
    <target name="deps-report" depends="-resolve" description="Generate Ivy module dependency report">
        <ivy:report conf="*"/>
    </target>

    <!-- =================================
          target: clean
         ================================= -->
    <target name="clean" depends="--grails-clean" description="Cleans Grails plugin">
        <delete dir="${lib.dir}"/>
        <delete dir="${ivy.build.dir}"/>
        <delete dir="${wifl.dir}"/>
    </target>

    <!-- extra target to avoid errors on Windows because libs on classpath can not be deleted -->
    <target name="--grails-clean" depends="-init-grails">
        <grails script="Clean"/>
    </target>

    <!-- =================================
          target: compile
         ================================= -->
    <target name="compile" depends="-init-grails" description="Compiles Grails plugin">
        <grails script="Compile"/>
    </target>

    <!-- =================================
          target: package 
         ================================= -->
    <target name="package" depends="build,compile" description="Packages Grails plugin ">
        <grails script="PackagePlugin"/>
        <mkdir dir="${ivy.build.dir}"/>
        <delete>
          <fileset dir="${ivy.build.dir}" includes="ivy.xml"/>
          <fileset dir="${ivy.build.dir}" includes="${module}.zip"/>
        </delete>
        <move file="${module}-${version}.zip" tofile="${ivy.build.dir}/${module}.zip"/>
    </target>

    <target name="publish" depends="package" description="Publishes Grails plugin to ivy repository">
       <echo>Publishing ivy artifacts to ${ivy.repository.dir}</echo>
       <ivy:publish resolver="projects" pubrevision="${version}"
          overwrite="${ivy.publish.overwrite}"
          artifactspattern="${ivy.build.dir}/[artifact].[ext]"/>
    </target>

    <!-- =================================
          target: test
         ================================= -->
    <target name="test" depends="-init-grails" description="Run Grails plugin's unit tests">
        <grails script="TestApp"/>
    </target>

    <!-- =================================
          target: run
         ================================= -->
    <target name="run" depends="-init-grails" description="Runs Grails plugin using embedded web server">
        <grails script="RunApp"/>
    </target>

    <target name="clean-cache" description="Cleans ivy cache">
        <ivy:cleancache/>
    </target>

    <target name="repreport" description="Generate ivy report">
        <ivy:repreport/>
    </target>
</project>
