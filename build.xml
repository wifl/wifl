<project name="Web InterFace Language" default="all">
  <target name="init">
    <tstamp>
      <format property="rundate" pattern="yyyyMMdd" locale="en,US"/> 
    </tstamp>
  </target>

  <!-- Provide access to user's environment variables -->
  <property environment="env" />

  <property name="specURI" value="http://wifl.org/spec/"/>
  <property name="rdfsURI" value="${specURI}wifl.xml"/>

  <!-- Source directories -->
  <property name="src" location="src"/>
  <property name="doc" location="doc"/>
  <property name="htmldoc" location="${doc}/html"/>
  <property name="exampledoc" location="${htmldoc}/example"/>
  <property name="umlgraph" location="${doc}/umlgraph"/>
  <property name="specdoc" location="${htmldoc}/spec"/>
  <property name="storedoc" location="${htmldoc}/store"/>
  <property name="wadl" location="${doc}/wadl"/>
  <property name="xsl" location="${doc}/xsl"/>

  <!-- Library directories -->
  <property name="lib" location="lib"/>
  <property name="javalib" location="${lib}/java"/>
  <property name="jslib" location="${lib}/js"/>
  <property name="requirejs" location="${jslib}/requirejs"/>
  <property name="qunit" location="${jslib}/qunit"/>
	
	<!-- XSpec properties -->
  <property name="xspec.properties" location="xspec.properties" /> 
  <property name="xspec.project.dir" location="${env.XSPEC_HOME}" />
  <property name="saxon.jar" location="${javalib}/saxon9he.jar" />
  <condition property="xspec.program" value="${env.XSPEC_HOME}/bin/xspec.bat" 
  	else="${env.XSPEC_HOME}/bin/xspec.sh">
		<os family="windows"/>
  </condition>
	
  <!-- Target directories -->
  <property name="build" location="build"/>
  <property name="htmlbuild" value="${build}/html" />
  <property name="imgbuild" value="${htmlbuild}/images" />
  <property name="specbuild" value="${htmlbuild}/spec" />
  <property name="dist" location="dist"/>
  <property name="site" location="site"/>
  <property name="test" location="test"/>
  <property name="zip" location="zip"/>

  <path id="rdfsgen-docletpath">
    <fileset dir="${javalib}">
      <include name="*.jar" />
    </fileset>
  </path>

  <path id="umlgraph-docletpath">
    <fileset dir="${env.UMLGRAPH_HOME}/lib" >
      <include name="*.jar" />
    </fileset>
  </path>
  
  <target name="umlgraph-file"
    description="Create PNG representation of UMLGraph source file" >
    <fail unless="env.UMLGRAPH_HOME" message="Must set environment variable UMLGRAPH_HOME" />
    <fail unless="env.GRAPHVIZ_HOME" message="Must set environment variable GRAPHVIZ_HOME" />
    <tempfile property="dotfile" destdir="${build}" suffix=".dot" deleteonexit="true" />
    <javadoc
      access="package"
      sourcefiles="${srcfile}"
      docletpathref="umlgraph-docletpath" >
      <doclet name="org.umlgraph.doclet.UmlGraph" >
        <param name="-output" value="${dotfile}" />
      </doclet>
    </javadoc>
    <exec executable="${env.GRAPHVIZ_HOME}/bin/dot" >
      <arg value="-T" />
      <arg value="${outformat}" />
      <arg value="-o" />
      <arg value="${outfile}" />
      <arg value="${dotfile}" />
    </exec>
  </target>
  
  <target name="umlgraph-views"
    description="Create PNG representation of views in UMLGraph source file" >
    <fail unless="env.UMLGRAPH_HOME" message="Must set environment variable UMLGRAPH_HOME" />
    <fail unless="env.GRAPHVIZ_HOME" message="Must set environment variable GRAPHVIZ_HOME" />
    <javadoc
      access="package"
      sourcefiles="${srcfile}"
      docletpathref="umlgraph-docletpath" >
      <doclet name="org.umlgraph.doclet.UmlGraph" >
        <param name="-d" value="${outdir}" />
        <param name="-views" />
      </doclet>
    </javadoc>
    <apply executable="${env.GRAPHVIZ_HOME}/bin/dot" dest="${outdir}" parallel="false">
      <arg value="-T" />
      <arg value="${outformat}"/>
      <arg value="-o"/>
      <targetfile/>
      <srcfile/>
      <fileset dir="${outdir}" includes="*.dot"/>
      <mapper type="glob" from="*.dot" to="*.${outformat}"/>
    </apply>
    <delete>
      <fileset dir="${outdir}" includes="*.dot" />
    </delete>
  </target>
  
  <target name="store.png"
    description="Create PNG representation of Store UMLGraph source file" >
    <antcall target="umlgraph-file">
      <param name="srcfile" value="${umlgraph}/wifl/Store.java" />
      <param name="outformat" value="png" />
      <param name="outfile" value="${imgbuild}/Store.png" />
    </antcall>
  </target>
  
  <target name="wifl.pngs"
    description="Create PNG representation of WIFL UMLGraph source file" >
    <antcall target="umlgraph-views">
      <param name="srcfile" value="${umlgraph}/wifl/Wifl.java" />
      <param name="outformat" value="png" />
      <param name="outdir" value="${imgbuild}" />
    </antcall>
  </target>
  
  <target name="wadl.png"
    description="Create PNG representation of WADL UMLGraph source file" >
    <antcall target="umlgraph-file">
      <param name="srcfile" value="${umlgraph}/wadl/Wadl.java" />
      <param name="outformat" value="png" />
      <param name="outfile" value="${imgbuild}/Wadl.png" />
    </antcall>
  </target>
    
  <target name="wifl.xml" 
    description="Create RDF schema from WIFL UMLGraph source file" >
    <javadoc 
      access="package"
      docletpathref="rdfsgen-docletpath" >
      <doclet name="com.alu.bl.umlgraph.rdfsgen.RdfsDoclet" >
        <param name="-xml-base" value="${rdfsURI}" />
        <param name="-rdf-namespace" value="${rdfsURI}#" />
        <param name="-rdf-prefix" value="wifl" />
        <param name="-format" value="rdfXml" />
        <param name="-output" value="${specbuild}/wifl.xml" />
      </doclet>
      <fileset dir="${umlgraph}">
        <filename name="wifl/Wifl.java" />
      </fileset>
    </javadoc>
  </target>

  <target name="wiflxml.xml" 
    description="Create XML representation of WIFL UMLGraph source file" >
    <javadoc 
      access="package"
      docletpathref="rdfsgen-docletpath" >
      <doclet name="com.alu.bl.umlgraph.rdfsgen.XmlDoclet" >
        <param name="-xml-base" value="${specURI}" />
        <param name="-rdf-namespace" value="${specURI}#" />
        <param name="-rdf-prefix" value="wifl" />
        <param name="-format" value="xml" />
        <param name="-output" value="${build}/WiflXml.xml" />
      </doclet>
      <fileset dir="${umlgraph}">
        <filename name="wifl/Wifl.java" />
      </fileset>
    </javadoc>
  </target>
  
  <target name="store.html" depends="wiflxml.xml, wifl.pngs, store.png"
    description="Create HTML documentation of Store example" >
    <xslt
      in="${build}/WiflXml.xml"
      style="${xsl}/store.xsl"
      out="${htmlbuild}/store.html">
      <param name="docdir" expression="${storedoc}"/>
    </xslt>
    <copy file="${specdoc}/spec.css" todir="${specbuild}" />
  </target>
	
  <target name="xslt-test" depends="init"
    description="Test XSLT stylesheets">
  	<exec executable="${xspec.program}">
  		<arg value="${src}/test/xsl/wadl-html.xspec"/>
  	</exec>
  <!--		<antcall target="xspec.xspec" inheritall="false">
  		  <param name="xspec.xml" location="${src}/test/xsl/flatten.xspec"/>
  			<param name="xspec.base.dir" location="${xspec.project.dir}"/>
  			<param name="xspec.dir" location=""/>
  			<param name="xspec.base" value=""/> 
  		</antcall> -->
  </target>
	
  <target name="store-wadl.html" depends="init"
    description="Create HTML documentation of Store example from its WADL" >
    <xslt
      in="${wadl}/store.wadl"
      style="${xsl}/wadl-wifl.xsl"
      out="${htmlbuild}/store-wadl.html">
    	<classpath location="${javalib}/saxon9he.jar"/>
    </xslt>
    <copy file="${specdoc}/spec.css" todir="${specbuild}" />
  </target>
  
  <target name="spec.html" depends="wiflxml.xml, wifl.pngs, wadl.png"
    description="Create HTML documentation of WIFL model" >
    <xslt
      in="${build}/WiflXml.xml"
      style="${xsl}/spec.xsl"
      out="${specbuild}/index.html">
      <param name="docdir" expression="${specdoc}"/>
    </xslt>
    <copy file="${specdoc}/spec.css" todir="${specbuild}" />
  </target>

  <target name="builddir" >
    <mkdir dir="${htmlbuild}"/>
  </target>
	
  <target name="doc" depends="builddir, spec.html, store.html, store-wadl.html, wifl.xml"
    description="Build documentation" >
    <mkdir dir="${htmlbuild}"/>
    <copy todir="${htmlbuild}">
      <fileset dir="${htmldoc}">
        <include name="*.html"/>
        <include name="*.css"/>
      </fileset>
    </copy>
  </target>
	
  <target name="dist">
    <mkdir dir="${dist}"/>
    <copy todir="${dist}">
      <fileset dir="${src}/main"/>
    </copy>
    <copy todir="${dist}/js">
      <fileset file="${requirejs}/require-jquery.js"/>
    </copy>
  </target>

  <target name="site" depends="doc">
    <mkdir dir="${site}"/>
    <copy todir="${site}">
      <fileset dir="${htmlbuild}"/>
      <fileset dir="${src}/main"/>
    </copy>
    <copy todir="${site}/js">
      <fileset file="${requirejs}/require-jquery.js"/>
    </copy>
  </target>

  <target name="uri-template-test">
    <mkdir dir="${test}/uriTemplate"/>
    <copy todir="${test}/uriTemplate">
      <fileset dir="${src}/test/uriTemplate"/>
      <fileset dir="${qunit}"/>
      <fileset dir="${requirejs}"/>
      <fileset file="${src}/main/js/nfa.js"/>
      <fileset file="${src}/main/js/uri-template2.js"/>
    </copy>
  </target>
	
  <target name="test" depends="uri-template-test">
  </target>
	
  <target name="zip" depends="init, dist, site, test">
		<mkdir dir="${zip}"/>
    <zip destfile="${zip}/wifl-dist-${rundate}.zip" 
       basedir="${dist}" />
    <zip destfile="${zip}/wifl-site-${rundate}.zip" 
       basedir="${site}" />
    <zip destfile="${zip}/wifl-test-${rundate}.zip"
       basedir="${test}" />
  </target>
	
  <target name="all" depends="zip"/>

  <target name="clean">
  	<delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${site}"/>
    <delete dir="${test}"/>
    <delete dir="${zip}"/>
  </target>

</project>
